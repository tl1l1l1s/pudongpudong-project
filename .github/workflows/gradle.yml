name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: tl1l1l1s/pudongpudong
  EC2_HOST: ${{ secrets.EC2_IP }}
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  CONTAINER_NAME: pudongpudong_container

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create resources directory
        run: mkdir -p ./src/main/resources

      - name: Add application.properties from Secrets
        run: |
          cat > ./src/main/resources/application.properties << EOF
          ${{ secrets.APPLICATION_PROPERTIES }}
          EOF

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew build -x test

      - name: Build Docker image
        run: docker build . -t ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          port: 22
          key: ${{ env.PRIVATE_KEY }}
          script: |
            # 네트워크가 존재하지 않으면 생성
            if ! sudo docker network ls | grep -q pudongpudong; then
              echo "Creating Docker network 'pudongpudong'..."
              sudo docker network create pudongpudong
            fi

            TIMESTAMP=$(date +"%Y%m%d%H%M%S")
            NEW_CONTAINER_NAME="${{ env.CONTAINER_NAME }}-$TIMESTAMP"

            # 기존 컨테이너 종료
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping container $CONTAINER_ID"
              sudo docker stop $CONTAIN